// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file shows examples of contract declarations.
// They are not type-checked at the moment.

package p

// A contract declaration, like any other declaration,
// starts with a keyword, followed by the contract name
// and the contract type parameters, and then the contract
// specification.
contract C(T) {
	T m()
}

// Contracts may be empty.
contract Empty() {}

// Contracts may be grouped.
contract (
	C1(T) {}
	C2(T) {}
	C3(T) {}
)

// A contract specifies methods and types for each of the
// type parameters it constrains.
contract Stringer(T) {
	T String() string
}

contract Sequence(T) {
	T string, []byte
}

// Contracts may constrain multiple type parameters
// in mutually recursive ways.
contract G(Node, Edge) {
	Node Edges() []Edge
	Edge Nodes() (from Node, to Node)
}

type Graph (type Node, Edge G) struct { /* ... */ }

func New (type Node, Edge G) (nodes []Node) *Graph(Node, Edge) { panic("unimplemented") }

func (g *Graph(Node, Edge)) ShortestPath(from, to Node) []Edge { panic("unimplemented") }

